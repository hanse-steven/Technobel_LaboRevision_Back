DROP TABLE IF EXISTS CartItem;
CREATE TABLE CartItem
(
    "id"        INT     PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "session"   UUID    NOT NULL,
    "product"   UUID    NOT NULL,
    "quantity"  INT     NOT NULL CHECK (quantity > 0),
    
    CONSTRAINT u_cartitem UNIQUE (session, product)
);
INSERT INTO CartItem (session, product, quantity) VALUES
('816da7cc-d469-41ae-a539-7b4f5b18ade1', '7406b2cc-2c22-4157-9fba-d56a969bde7c', 2);

DROP TABLE IF EXISTS Product;
CREATE TABLE Product
(
    "id"          UUID            PRIMARY KEY,
    "name"        VARCHAR(50)     NOT NULL,
    "price"       DECIMAL(18, 2)  NOT NULL CHECK (price > 0),
    "quantity"    INT             NOT NULL CHECK (quantity >= 0)
);

INSERT INTO Product VALUES
('7406b2cc-2c22-4157-9fba-d56a969bde7c', 'Pizza', 5, 7),
('eae4e338-a230-46ae-b29b-357053b7627e', 'Burger', 5, 7),
('2d764f53-9371-4bbd-b9f3-31e85dec8a6d', 'Pâte', 8, 6),
('8d9164eb-99c9-421d-b603-7c2c95ff8dae', 'Salade', 4, 5),
('e769faad-6a86-44cc-a87f-78efb9a5a6e8', 'Sushi', 12, 4),
('16de1a34-e5cb-4b5a-9197-5be3b4eaeee6', 'Tacos', 6, 3),
('a8896983-47ec-4daf-a00f-d174d43e10a2', 'Frite', 3, 2),
('6b7ea087-e29b-4cbd-adba-86113c232ef7', 'Glace', 2, 1),
('fe1f7583-5d30-413e-8f7c-230368470af3', 'Donuts', 1, 0),
('2d935bff-c81d-44d6-8f39-8d154d389ac7', 'Cupcake', 1, 9);


DROP TABLE IF EXISTS Invoice;
CREATE TABLE Invoice
(
    "id"          INT             PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "user"        VARCHAR(100)    NOT NULL,
    "date"        TIMESTAMP       NOT NULL
);

DROP TABLE IF EXISTS InvoiceItem;
CREATE TABLE InvoiceItem
(
    "id"          INT             PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "invoice"     INT             NOT NULL,
    "product"     UUID            NOT NULL,
    "price"       DECIMAL(18, 2)  NOT NULL CHECK (price > 0),
    "quantity"    INT             NOT NULL CHECK (quantity > 0),
    
    CONSTRAINT u_invoiceitem UNIQUE (invoice, product)
);

DROP PROCEDURE IF EXISTS CreateInvoice(session_client UUID,email_client VARCHAR(100));
CREATE PROCEDURE CreateInvoice(session_client UUID,email_client VARCHAR(100))
LANGUAGE plpgsql AS $$
DECLARE
    item CartItem%ROWTYPE;
    id_invoice INT;
BEGIN
    FOR item IN SELECT * FROM CartItem WHERE session = session_client LOOP
        IF NOT checkstock(item.product, item.quantity) THEN
            RAISE EXCEPTION 'Not enough stock';
        END IF;
    END LOOP;
    
    INSERT INTO Invoice ("user", date) VALUES (email_client, NOW()) RETURNING id INTO id_invoice;

    INSERT INTO InvoiceItem (invoice, product, price, quantity)
    SELECT id_invoice,c.product, p.price, c.quantity
    FROM CartItem c
    INNER JOIN Product p ON c.product = p.id
    WHERE c.session = session_client;

    FOR item IN SELECT * FROM CartItem WHERE session = session_client LOOP
        CALL adjuststock(item.product, item.quantity);
    END LOOP;
    DELETE FROM CartItem WHERE session = session_client;
    
EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE 'An error occurred: %', SQLERRM;
        RAISE;
END;
$$;

DROP FUNCTION IF EXISTS CheckStock(product_id UUID, quantity_cart INT);
CREATE FUNCTION CheckStock(product_id UUID, quantity_cart INT) RETURNS BOOLEAN
LANGUAGE plpgsql AS $$
BEGIN
    RETURN (SELECT quantity >= quantity_cart FROM Product WHERE id = product_id);
END;
$$;

DROP PROCEDURE IF EXISTS AdjustStock(product_id UUID, quantity_cart INT);
CREATE PROCEDURE AdjustStock(product_id UUID, quantity_cart INT)
LANGUAGE plpgsql AS $$
BEGIN
    UPDATE Product SET quantity = quantity - quantity_cart WHERE id = product_id;
END;
$$;

DROP TABLE IF EXISTS "user";
CREATE TABLE "user"
(
    "email"     VARCHAR(100)    PRIMARY KEY,
    "password"  VARCHAR(100)    NOT NULL,
    "created"   TIMESTAMP       NOT NULL
);